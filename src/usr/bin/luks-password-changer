#!/usr/bin/env python3

import gi
import subprocess
import threading

gi.require_version('Gtk', '4.0')
from gi.repository import Gtk, GLib, Gio

class LUKSPasswordChanger(Gtk.Application):
    def __init__(self):
        super().__init__(application_id='com.eleven-labs.luks-password-changer')
        self.window = None

    def do_activate(self):
        if not self.window:
            self.window = Gtk.ApplicationWindow(application=self)
            self.window.set_title("LUKS Password Changer")
            self.window.set_default_size(500, 300)

            # Main vertical box
            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10, margin_top=10, margin_bottom=10, margin_start=10, margin_end=10)
            self.window.set_child(vbox)

             # === Info Box with SVG Illustration and Explanation ===
            info_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=20)
            info_box.set_homogeneous(True)  # Ensures both children (image and label) are treated equally

            # SVG Owl Illustration (you must provide a real path to the SVG file)
            try:
                astronaut_image = Gtk.Picture.new_for_filename("/usr/share/pixmaps/luks-password-changer/astronaut.svg")
                astronaut_image.set_content_fit(Gtk.ContentFit.COVER)
                astronaut_image.set_size_request(200, 200)
            except Exception as e:
                astronaut_image = Gtk.Image()  # fallback in case image fails
            info_box.append(astronaut_image)

            # Explanation Label
            explanation_label = Gtk.Label()
            explanation_label.set_wrap(True)
            explanation_label.set_xalign(0)
            explanation_label.set_markup("<span font=\"13\">üîê Pour des raisons de s√©curit√©, il est fortement recommand√© de changer le mot de passe de votre partition chiffr√©e. Cela prot√®ge vos donn√©es contre les acc√®s non autoris√©s.</span>")
            info_box.append(explanation_label)

            vbox.append(info_box)

            # Partition selection
            partition_label = Gtk.Label(label="Choisir une partition :")
            partition_label.set_halign(Gtk.Align.START)
            vbox.append(partition_label)

            self.partition_combo = Gtk.DropDown()
            self.partition_store = Gtk.StringList()
            self.partition_combo.set_model(self.partition_store)
            vbox.append(self.partition_combo)

            # Old password
            old_password_label = Gtk.Label(label="Mot de passe actuel (\"changezmoi\" par d√©faut) :")
            old_password_label.set_halign(Gtk.Align.START)
            vbox.append(old_password_label)

            self.old_password_entry = Gtk.Entry()
            self.old_password_entry.set_visibility(False)
            vbox.append(self.old_password_entry)

            # New password
            new_password_label = Gtk.Label(label="Nouveau mot de passe :")
            new_password_label.set_halign(Gtk.Align.START)
            vbox.append(new_password_label)

            self.new_password_entry = Gtk.Entry()
            self.new_password_entry.set_visibility(False)
            self.new_password_entry.connect("changed", self.on_password_changed)
            vbox.append(self.new_password_entry)

            # Confirm password
            confirm_password_label = Gtk.Label(label="Confirmer le mot de passe :")
            confirm_password_label.set_halign(Gtk.Align.START)
            vbox.append(confirm_password_label)

            self.confirm_password_entry = Gtk.Entry()
            self.confirm_password_entry.set_visibility(False)
            vbox.append(self.confirm_password_entry)

            # Password strength
            self.strength_label = Gtk.Label(label="Force du mot de passe : ")
            self.strength_label.set_halign(Gtk.Align.START)
            vbox.append(self.strength_label)

            self.progress_bar = Gtk.ProgressBar()
            vbox.append(self.progress_bar)

            # Status label
            self.status_label = Gtk.Label(label="")
            self.status_label.set_halign(Gtk.Align.START)
            vbox.append(self.status_label)

            # Change button and spinner
            hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
            self.change_button = Gtk.Button(label="Changer le mot de passe")
            self.change_button.connect("clicked", self.on_change_clicked)
            hbox.append(self.change_button)

            self.spinner = Gtk.Spinner()
            hbox.append(self.spinner)

            vbox.append(hbox)

            self.detect_encrypted_partitions()

        self.window.present()

    def detect_encrypted_partitions(self):
        try:
            cmd = "lsblk -lpn -o name,fstype | grep crypto_LUKS | awk '{ print $1; }'"
            output = subprocess.check_output(cmd, shell=True, text=True).strip()
            partitions = output.splitlines()
            for partition in partitions:
                self.partition_store.append(partition)
            if partitions:
                self.partition_combo.set_selected(0)
            else:
                self.status_label.set_text("Aucune parition chiffr√©e trouv√©e.")
        except subprocess.CalledProcessError as e:
            self.status_label.set_text(f"Error: {str(e)}")

    def on_password_changed(self, widget):
        password = widget.get_text()
        strength, description = self.estimate_strength(password)
        self.progress_bar.set_fraction(strength)
        self.strength_label.set_text(f"Force du mot de passe : {description}")

    def estimate_strength(self, password):
        length = len(password)
        variations = len(set(password))
        score = length * variations / 100.0
        score = min(score, 1.0)

        if score < 0.3:
            return score, "Faible"
        elif score < 0.7:
            return score, "Moyen"
        else:
            return score, "Fort"

    def on_change_clicked(self, button):
        partition_index = self.partition_combo.get_selected()
        if partition_index == -1:
            self.status_label.set_text("Aucune partition s√©lectionn√©e.")
            return
        partition = self.partition_store.get_string(partition_index)
        old_password = self.old_password_entry.get_text()
        new_password = self.new_password_entry.get_text()
        confirm_password = self.confirm_password_entry.get_text()

        if not all([partition, old_password, new_password, confirm_password]):
            self.status_label.set_text("Tous les champs sont requis.")
            return

        if new_password != confirm_password:
            self.status_label.set_text("Les mots de passes ne correspondent pas.")
            return

        # Start spinner
        self.spinner.start()
        self.change_button.set_sensitive(False)

        # Run the password change in a separate thread
        threading.Thread(target=self.change_password, args=(partition, old_password, new_password)).start()

    def change_password(self, partition, old_password, new_password):
        try:
            cmd = ['pkexec', 'cryptsetup', 'luksChangeKey', partition]
            proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = proc.communicate(input=old_password + '\n' + new_password + '\n')
            if proc.returncode == 0:
                GLib.idle_add(self.status_label.set_text, "Mot de passe mis √† jour avec succ√®s!")
                self.disable_application_autostart()
            else:
                error_message = stderr.strip() or "Echec de la mise √† jour, mot de passe actuel incorrect ?"
                GLib.idle_add(self.status_label.set_text, error_message)
        except Exception as e:
            GLib.idle_add(self.status_label.set_text, f"Erreur : {str(e)}")
        finally:
            # Stop spinner and re-enable button
            GLib.idle_add(self.spinner.stop)
            GLib.idle_add(self.change_button.set_sensitive, True)

    def disable_application_autostart(self):
        settings = Gio.Settings.new(self.get_application_id())
        settings.set_boolean("luks-password-unchanged", False)


def main():
    app = LUKSPasswordChanger()
    app.run()

if __name__ == "__main__":
    main()
